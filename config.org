* Basic Stuff
** User Info
#+begin_src emacs-lisp
  (setq user-full-name "Ayush Singh")
  (setq user-mail-address "ayush1325@protonmail.com")
#+end_src

* UI
** Disable Toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
** Disable Menubar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
** Shorten Prompt
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Highlight Current Line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src
** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (doom-themes-treemacs-config))
#+end_src
** Modline
*** Doom Modline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
*** Hide Modline
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :ensure t)
#+end_src
** Pagebreaker
- Needed by Dashboard.
  #+begin_src emacs-lisp
    (use-package page-break-lines
      :ensure t
      :config
      (setq global-page-break-lines-mode 1))
  #+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :if (< (length command-line-args) 2)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda ()
                                  (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
                            (projects . 10)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t))
#+end_src
** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 1
    :config (which-key-mode))
#+end_src
** Ivy
*** Base
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+end_src
*** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))

  (setq all-the-icons-ivy-rich-icon-size 0.8)
#+end_src
** Edit Indirect
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer t
    :config
    (global-undo-tree-mode 1))
#+end_src
** Rainbow Mode
- Highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src  
** Prettify Symbols
- Displaying characters as fancy symbols (e.g. lambda -> Î»)
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src  
** Treemacs
*** Base
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   t
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-width                           35
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
*** Evil Integration
#+begin_src emacs-lisp
  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)
#+end_src
*** Projectile Integration
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)
#+end_src
*** Icons
#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))
#+end_src
*** Magit Integration
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src
** Tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :custom
    (centaur-tabs-style "box")
    (centaur-tabs-set-icons t)
    (centaur-tabs-gray-out-icons 'buffer)
    (centaur-tabs-set-bar 'left)
    (centaur-tabs-height 28)
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-group-by-projectile-project))
#+end_src

* Text Stuff
** Expand Select
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :bind (("C-=" . er/expand-region)))
#+end_src
** Multiple Cursor
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))
#+end_src
** IEdit
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t
    :defer t)
#+end_src
** Hungry Delete
*** Base
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :defer 1
    :config (global-hungry-delete-mode t))
#+end_src
*** Disable in Minibuffer
#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook (lambda () (hungry-delete-mode -1)))
#+end_src
** Move Text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :defer t
    :bind (("M-<up>" . move-text-up)
           ("M-<down>" . move-text-down)))
#+end_src
** Company
*** Base
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-backends '(company-capf company-files company-yasnippet company-etags company-elisp))
    (company-require-match nil)
    (company-tooltip-align-annotations t)
    (company-eclim-auto-save nil)
    (company-dabbrev-downcase nil)
    (company-echo-delay 0)
    (company-idle-delay 0)
    (company-tooltip-limit 20)
    :config
    (global-company-mode))
#+end_src
*** Fuzzy Matching
#+begin_src emacs-lisp
  (use-package company-fuzzy
    :ensure t
    :config
    (global-company-fuzzy-mode 1))
#+end_src

* Programming
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (setq git-commit-summary-max-length 50))
#+end_src
** Lisp
*** Emacs Lisp
**** Basic
#+begin_src emacs-lisp
  (use-package eldoc
    :ensure t
    :defer t
    :hook (emacs-lisp-mode . eldoc-mode))

  (use-package highlight-defined
    :ensure t
    :defer t
    :hook (emacs-lisp-mode . highlight-defined-mode))
#+end_src
**** Company Backeds
#+begin_src emacs-lisp
  ;;(add-hook 'emacs-lisp-mode
  ;;          (lambda ()
  ;;            (setq-local company-backends (append company-backends '(company-etags company-elisp)))
  ;;            (company-fuzzy-mode 1)))
#+end_src
** Smart Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :defer t
    :hook (((clojure-mode cider-repl-mode emacs-lisp-mode slime-repl-mode lisp-mode) . smartparens-strict-mode)
             ((prog-mode) . smartparens-mode))
    :config
    (sp-use-smartparens-bindings)
    (require 'smartparens-config))
#+end_src
** Vterm
*** Base
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t)
#+end_src
*** Disable Line Numbers
#+begin_src emacs-lisp
  (add-hook 'vterm-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (hide-mode-line-mode t)))
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer t)
#+end_src
** Json
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :defer t)
#+end_src
** LSP
*** Base
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook (((rustic-mode shell-mode json-mode cmake-mode yaml-mode c++-mode c-mode) . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . yas-minor-mode))
    :commands (lsp lsp-deferred))
#+end_src
*** UI Stuff
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :defer t
    :commands lsp-ui-mode)
#+end_src
*** Ivy Integration
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :defer t
    :commands lsp-ivy-workspace-symbol)
#+end_src
** DAP Mode
*** Base
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t
    :defer t)
#+end_src
** Rust
*** Rustic
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :defer t)
#+end_src
** Journalctl
#+begin_src emacs-lisp
  (use-package journalctl-mode
    :ensure t
    :defer t)

#+end_src

* Org Mode
** Easy Templates
- For <s shortcut and stuff.
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Pretty Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :hook (org-mode . org-bullets-mode))
#+end_src
** Custom Variables
#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+end_src
** Pretty Stuff
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-ellipsis "â¤µ")
  (setq org-src-tab-acts-natively t)
#+end_src
** TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :defer t
    :hook (org-mode . toc-org-mode))
#+end_src
** Org Roam
*** Base
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :config
    (setq org-roam-directory (file-truename "~/Documents/Notes/Org"))
    (org-roam-db-autosync-mode))
#+end_src
** Follow Link
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src
** Math Preview
- To preview math fragmaents in Tex.
#+begin_src emacs-lisp
  (use-package math-preview
    :ensure t
    :defer t)
#+end_src  

* Evil Mode
** Base Package
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src
** Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** Custom Keybindings
*** Leader
#+begin_src emacs-lisp
  (evil-set-leader 'normal (kbd "SPC"))
#+end_src
*** Org Mode
**** Base
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader>ol") 'org-insert-link)
#+end_src
**** Org Roam
***** Global
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "<leader>oi") 'org-toggle-inline-images
    (kbd "<leader>orc") 'org-roam-capture
    (kbd "<leader>org") 'org-roam-graph
    (kbd "<leader>orf") 'org-roam-node-find)
#+end_src
***** Local
#+begin_src emacs-lisp
  (evil-define-key 'normal 'org-mode-map
    (kbd "<leader>ort") 'org-roam-tag-add
    (kbd "<leader>ora") 'org-roam-alias-add
    (kbd "<leader>orb") 'org-roam-buffer-toggle
    (kbd "<leader>ori") 'org-roam-node-insert)
#+end_src
*** Magit
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader>gg") 'magit-status)
#+end_src
*** Help
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "<leader>hf") 'counsel-describe-function
    (kbd "<leader>hk") 'counsel-descbinds
    (kbd "<leader>hs") 'counsel-describe-symbol
    (kbd "<leader>hv") 'counsel-describe-variable)
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "<leader>bk") 'kill-buffer
    (kbd "<leader>bw") 'kill-buffer-and-window
    (kbd "<leader>bc") 'kill-current-buffer
    (kbd "<leader>bb") 'counsel-switch-buffer)
#+end_src
*** File
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "<leader>.") 'counsel-find-file
    (kbd "<leader>ff") 'counsel-find-file)
#+end_src
*** Dead Keys
- Ignore Dead Keys. Useful for the programmable keys.
  #+begin_src emacs-lisp
    (evil-define-key 'normal 'global (kbd "<dead-circumflex>") 'ignore)
  #+end_src
*** Treemacs
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader>tt") 'treemacs)
#+end_src
* Pdf Mode
** Base
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :config
    (require 'pdf-tools)
    (require 'pdf-view)
    (require 'pdf-misc)
    (require 'pdf-occur)
    (require 'pdf-util)
    (require 'pdf-annot)
    (require 'pdf-info)
    (require 'pdf-isearch)
    (require 'pdf-history)
    (require 'pdf-links)
    (pdf-tools-install :no-query))
#+end_src
** Disable Line Numebrs
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src
